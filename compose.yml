services:
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    image: ${REGISTRY:-}voicevault-ui:${VERSION:-latest}
    ports:
      - "${UI_PORT:-3000}:80"
    depends_on:
      - api
    restart: unless-stopped

  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    image: ${REGISTRY:-}voicevault-api:${VERSION:-latest}
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - LLM_PROVIDER=${LLM_PROVIDER:-groq}
      - LLM_MODEL=${LLM_MODEL:-llama-3.3-70b-versatile}
      - UPLOAD_DIR=${UPLOAD_DIR:-uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - PROCESSING_TIMEOUT=${PROCESSING_TIMEOUT:-3600}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    volumes:
      - ./api:/app
      - api_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  worker-download:
    build:
      context: ./worker
      dockerfile: Dockerfile
    image: ${REGISTRY:-}voicevault-worker:${VERSION:-latest}
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      - WORKER_MODE=download
      - WORKER_INTERVAL=${WORKER_INTERVAL:-10}
      - BATCH_SIZE=${BATCH_SIZE:-5}
      - DOWNLOAD_DIR=${DOWNLOAD_DIR:-downloads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    volumes:
      - ./worker:/app
      - worker_downloads:/app/downloads
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  worker-asr:
    build:
      context: ./worker
      dockerfile: Dockerfile
    image: ${REGISTRY:-}voicevault-worker:${VERSION:-latest}
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}
      - WORKER_MODE=asr
      - WORKER_INTERVAL=${WORKER_INTERVAL:-10}
      - BATCH_SIZE=${BATCH_SIZE:-5}
      - ASR_PROVIDER=${ASR_PROVIDER:-groq}
      - ASR_MODEL=${ASR_MODEL:-whisper-large-v3-turbo}
      - LLM_PROVIDER=${LLM_PROVIDER:-groq}
      - LLM_MODEL=${LLM_MODEL:-llama-3.3-70b-versatile}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    volumes:
      - ./worker:/app
      - worker_downloads:/app/downloads
      - api_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./storage:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  api_uploads:
  worker_downloads: